{"version":3,"sources":["webpack:///./src/index/index.less?db6f","index/index.less","index/index.jsx","router/router.js","serviceWorker.js","index.js"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","Index","_this","this","_react_16_8_6_react_default","a","createElement","onClick","run","className","id","createBody","createFooter","React","Component","MainRouter","_react_16_8_6_react","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHACA,IAAAA,EAAcC,EAAQ,IAEtB,kBAAAD,MAAA,EAA4CE,EAAAC,EAASH,EAAA,MAOrD,IAAAI,EAAA,CAAeC,KAAA,EAEfC,eAPAA,EAQAC,gBAAAC,GAEaP,EAAQ,GAARA,CAAgFD,EAAAI,GAE7FJ,EAAAS,SAAAP,EAAAQ,QAAAV,EAAAS,6BCjBAP,EAAAQ,QAA2BT,EAAQ,GAARA,EAAyE,IAKpGU,KAAA,CAAcT,EAAAC,EAAS,+JAA6J,6IC8BrKS,8LAhCC,IAAAC,EAAAC,KACR,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,QAAS,WAAML,EAAKM,QAAzB,4BAGAJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAf,UACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QAAf,UACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QAAf,kDAMR,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6DAQR,OACIF,EAAAC,EAAAC,cAAA,OAAKI,GAAG,cACHP,KAAKQ,aACLR,KAAKS,uBA5BFC,IAAMC,YCiBXC,mLATP,OACIC,EAAA,cAACC,EAAA,EAAD,KACCD,EAAA,cAACE,EAAA,EAAD,gBACGF,EAAA,cAACG,EAAA,EAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAWrB,aAL/BY,aCILU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACLzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAAD,OAEFC,SAASC,eAAe,QDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.048b37d9.chunk.js","sourcesContent":["\nvar content = require(\"!!../../node_modules/_css-loader@1.0.0@css-loader/index.js!../../node_modules/_less-loader@4.0.5@less-loader/dist/cjs.js!./index.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/_style-loader@0.23.1@style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/_css-loader@1.0.0@css-loader/index.js!../../node_modules/_less-loader@4.0.5@less-loader/dist/cjs.js!./index.less\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/_css-loader@1.0.0@css-loader/index.js!../../node_modules/_less-loader@4.0.5@less-loader/dist/cjs.js!./index.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/_css-loader@1.0.0@css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#index-warp {\\n  color: red;\\n}\\n#index-warp .lxy {\\n  color: black;\\n}\\n#index-warp .lxy1 {\\n  color: yellow;\\n}\\n#index-warp .lxy2 {\\n  color: green;\\n}\\n\", \"\"]);\n\n// exports\n","import React from 'react';\nimport './index.less'\nclass Index extends React.Component{\n    createBody(){\n        return(\n            <div>\n                <div onClick={()=> {this.run()}}>\n                    哈哈哈哈\n                </div>\n                <div className=\"lxy\">啊</div>\n                <div className=\"lxy1\">啊</div>\n                <div className=\"lxy2\">啊</div>\n            </div>\n\n        )\n    }\n    createFooter(){\n        return(\n            <div>\n                <div>\n                    底部\n                </div>\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <div id=\"index-warp\">\n                {this.createBody()}\n                {this.createFooter()}\n            </div>\n        )\n    }\n}\nexport default Index","/**\n * Created by kyn on 19/3/22.\n */\n\nimport * as React from 'react';\nimport {HashRouter ,Switch,Route} from 'react-router-dom';\nimport Index from '../index/index.jsx';\n\nclass MainRouter extends React.Component {\n    render() {\n        return (\n            <HashRouter >\n             <Switch>        {/*只渲染第一个匹配到的<路由组件>或<重定向组件>*/}\n                <Route exact={true} path=\"/\" component={Index} />\n             </Switch>\n            </HashRouter>\n        );\n    }\n}\nexport default MainRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainRouter from './router/router'\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <MainRouter/>\n    </div>\n    , document.getElementById('app'));\nserviceWorker.unregister();\n"],"sourceRoot":""}